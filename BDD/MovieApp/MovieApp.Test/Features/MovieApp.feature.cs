// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace MovieApp.Test.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class MovieAppFeature : object, Xunit.IClassFixture<MovieAppFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "MovieApp.feature"
#line hidden
        
        public MovieAppFeature(MovieAppFeature.FixtureData fixtureData, MovieApp_Test_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "MovieApp", "\tTo manage my MovieApp, I want a system that add movie to the list and get all th" +
                    "e movies form list.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Adding a Movie to the MovieApp")]
        [Xunit.TraitAttribute("FeatureTitle", "MovieApp")]
        [Xunit.TraitAttribute("Description", "Adding a Movie to the MovieApp")]
        [Xunit.TraitAttribute("Category", "addMovie")]
        [Xunit.InlineDataAttribute("", "fantasy", "2010", "1 2", "1", "failed Invalid inputs", new string[] {
                "invalidData"})]
        [Xunit.InlineDataAttribute("Avatar", "fantasy", "2010", "", "1", "failed Invalid inputs", new string[] {
                "invalidData"})]
        [Xunit.InlineDataAttribute("Avatar", "fantasy", "", "1 2", "1", "failed Invalid inputs", new string[] {
                "invalidData"})]
        [Xunit.InlineDataAttribute("Avatar", "", "2010", "1 2", "1", "failed Invalid inputs", new string[] {
                "invalidData"})]
        [Xunit.InlineDataAttribute("Avatar", "fantasy", "2010", "1 2", "", "failed Invalid inputs", new string[] {
                "invalidData"})]
        [Xunit.InlineDataAttribute("Avatar", "fantasy", "2010", "1 3", "1", "successfully added", new string[] {
                "validData"})]
        public virtual void AddingAMovieToTheMovieApp(string movieName, string moviePlot, string yearOfRelease, string actors, string producer, string message, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "addMovie"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("movieName", movieName);
            argumentsOfScenario.Add("moviePlot", moviePlot);
            argumentsOfScenario.Add("YearOfRelease", yearOfRelease);
            argumentsOfScenario.Add("Actors", actors);
            argumentsOfScenario.Add("Producer", producer);
            argumentsOfScenario.Add("message", message);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding a Movie to the MovieApp", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
 testRunner.Given(string.Format("I have to add a movie with the details as \"{0}\", \"{1}\", \"{2}\", \"{3}\" and \"{4}\"", movieName, moviePlot, yearOfRelease, actors, producer), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
 testRunner.When("I add the movie to the MovieApp", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
 testRunner.Then(string.Format("display message \"{0}\" on the screen", message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="List all movies in MovieApp")]
        [Xunit.TraitAttribute("FeatureTitle", "MovieApp")]
        [Xunit.TraitAttribute("Description", "List all movies in MovieApp")]
        [Xunit.TraitAttribute("Category", "listMovies")]
        public virtual void ListAllMoviesInMovieApp()
        {
            string[] tagsOfScenario = new string[] {
                    "listMovies"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List all movies in MovieApp", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 26
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 27
 testRunner.Given("I have a MovieApp of movies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 28
 testRunner.When("I fetch all the movies with details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Plot",
                            "YearOfRelease",
                            "Actors",
                            "Producers"});
                table1.AddRow(new string[] {
                            "Avatar",
                            "fantasy",
                            "2010",
                            "Will Smith,Alisha",
                            "Disney"});
                table1.AddRow(new string[] {
                            "Liger",
                            "action",
                            "2020",
                            "Vijay D,Ananya P",
                            "Dharma"});
                table1.AddRow(new string[] {
                            "Tiger",
                            "romance",
                            "2000",
                            "Salman,Katrina",
                            "Sanjay Dutt"});
#line 29
 testRunner.Then("I should have the following movies", ((string)(null)), table1, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                MovieAppFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                MovieAppFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
